snippet gobject
	#ifndef ${$1|functify|upper}_H
	#define ${$1|functify|upper}_H

	#include ${3:<glib-object.h>}

	G_BEGIN_DECLS

	#define ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}            (${$1|functify}_get_type())
	#define ${$1|functify|namespace|upper}_${$1|class|functify|upper}(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}, $1))
	#define ${$1|functify|namespace|upper}_${$1|class|functify|upper}_CONST(obj)      (G_TYPE_CHECK_INSTANCE_CAST ((obj), ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}, $1 const))
	#define ${$1|functify|namespace|upper}_${$1|class|functify|upper}_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}, $1Class))
	#define ${$1|functify|namespace|upper}_IS_${$1|class|functify|upper}(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}))
	#define ${$1|functify|namespace|upper}_IS_${$1|class|functify|upper}_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}))
	#define ${$1|functify|namespace|upper}_${$1|class|functify|upper}_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}, $1Class))

	typedef struct _$1        $1;
	typedef struct _$1Class   $1Class;
	typedef struct _$1Private $1Private;

	struct _${1:$filename|stripsuffix|functify|camelize}
	{
		${2:GObject} parent;

		/*< private >*/
		$1Private *priv;
	};

	struct _$1Class
	{
		$2Class parent;
	};

	GType ${$1|space}${$1|functify}_get_type (void);
	$1     *${$1|functify}_new      (void);
	$0
	G_END_DECLS

	#endif /* ${$1|functify|upper}_H */
snippet guard
	#ifndef ${1:$filename|stripsuffix|functify|upper}_H
	#define $1_H

	#include <glib.h>

	G_BEGIN_DECLS

	$0

	G_END_DECLS

	#endif /* $1_H */
snippet ginterface
	#ifndef ${$1|functify|upper}_H
	#define ${$1|functify|upper}_H

	#include <glib-object.h>

	G_BEGIN_DECLS

	#define ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}               (${$1|functify}_get_type ())
	#define ${$1|functify|namespace|upper}_${$1|class|functify|upper}(obj)               (G_TYPE_CHECK_INSTANCE_CAST ((obj), ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}, $1))
	#define ${$1|functify|namespace|upper}_IS_${$1|class|functify|upper}(obj)            (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}))
	#define ${$1|functify|namespace|upper}_${$1|class|functify|upper}_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ${$1|functify|namespace|upper}_TYPE_${$1|class|functify|upper}, $1Interface))

	typedef struct _$1      $1;
	typedef struct _$1Interface $1Interface;

	struct _${1:$filename|stripsuffix|functify|camelize}Interface
	{
		GTypeInterface parent;
	};

	GType foo_bar_get_type (void) G_GNUC_CONST;

	G_END_DECLS

	#endif /* ${$1|functify|upper}_H */
